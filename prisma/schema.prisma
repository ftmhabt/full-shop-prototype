generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model User {
  id        String   @id @default(cuid())
  phone     String   @unique
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  blogPosts BlogPost[]
}

model Otp {
  id        String   @id @default(cuid())
  phone     String
  codeHash  String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([phone, expiresAt])
}

model Product {
  id          String             @id @default(cuid())
  slug        String             @unique
  name        String
  description String
  image       String[]
  price       Int
  stock       Int
  categoryId  String
  category    Category           @relation(fields: [categoryId], references: [id])
  attributes  ProductAttribute[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  orderItems OrderItem[]
}

model Category {
  id         String      @id @default(cuid())
  name       String
  slug       String      @unique
  products   Product[]
  attributes Attribute[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  items OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Attribute {
  id         String   @id @default(cuid())
  name       String
  slug       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  values            AttributeValue[]
  productAttributes ProductAttribute[]

  @@unique([name, categoryId])
  @@unique([slug, categoryId])
}

model AttributeValue {
  id                String             @id @default(cuid())
  value             String
  slug              String
  attributeId       String
  attribute         Attribute          @relation(fields: [attributeId], references: [id])
  productAttributes ProductAttribute[]

  @@unique([value, attributeId])
  @@unique([slug, attributeId])
  @@index([attributeId])
  @@index([value])
}

model ProductAttribute {
  id        String @id @default(cuid())
  productId String
  valueId   String

  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  value       AttributeValue @relation(fields: [valueId], references: [id], onDelete: Cascade)
  Attribute   Attribute?     @relation(fields: [attributeId], references: [id])
  attributeId String?

  @@unique([productId, valueId])
  @@index([productId])
  @@index([valueId])
}
