generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model User {
  id          String   @id @default(cuid())
  phone       String   @unique
  firstName   String?
  lastName    String?
  displayName String?
  email       String?
  role        Role     @default(USER)
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders    Order[]
  blogPosts BlogPost[]
  Address   Address[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String
  fullName   String
  phone      String
  province   String
  city       String
  address    String
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model Otp {
  id        String   @id @default(cuid())
  phone     String
  codeHash  String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([phone, expiresAt])
}

model Product {
  id          String             @id @default(cuid())
  slug        String             @unique
  name        String
  description String
  image       String[]
  badge       String?
  oldPrice    Int?
  rating      Int?
  price       Int
  stock       Int                @default(0)
  soldCount   Int                @default(0)
  categoryId  String
  category    Category           @relation(fields: [categoryId], references: [id])
  attributes  ProductAttribute[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  orderItems OrderItem[]
}

model Category {
  id         String      @id @default(cuid())
  name       String
  slug       String      @unique
  products   Product[]
  attributes Attribute[]
}

model Order {
  id     String      @id @default(cuid())
  userId String
  user   User        @relation(fields: [userId], references: [id])
  status OrderStatus @default(PENDING)

  fullName String @default("Unknown")
  phone    String @default("0000000000")

  province   String  @default("Unknown")
  city       String  @default("Unknown")
  address    String  @default("Unknown")
  postalCode String?

  totalPrice Int @default(0)
  discount   Int @default(0)
  finalPrice Int @default(0)

  paymentMethod String    @default("ONLINE") // ONLINE, COD
  paymentStatus String    @default("PENDING") // PENDING, PAID, FAILED
  paidAt        DateTime?

  trackingCode String?
  shippedAt    DateTime?
  deliveredAt  DateTime?

  createdAt DateTime @default(now())

  items            OrderItem[]
  ShippingMethod   ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String?
  OrderLog         OrderLog[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Attribute {
  id         String   @id @default(cuid())
  name       String
  slug       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  values            AttributeValue[]
  productAttributes ProductAttribute[]

  @@unique([name, categoryId])
  @@unique([slug, categoryId])
}

model AttributeValue {
  id                String             @id @default(cuid())
  value             String
  slug              String
  attributeId       String
  attribute         Attribute          @relation(fields: [attributeId], references: [id])
  productAttributes ProductAttribute[]

  @@unique([value, attributeId])
  @@unique([slug, attributeId])
  @@index([attributeId])
  @@index([value])
}

model ProductAttribute {
  id        String @id @default(cuid())
  productId String
  valueId   String

  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  value       AttributeValue @relation(fields: [valueId], references: [id], onDelete: Cascade)
  Attribute   Attribute?     @relation(fields: [attributeId], references: [id])
  attributeId String?

  @@unique([productId, valueId])
  @@index([productId])
  @@index([valueId])
}

model ShippingMethod {
  id        String   @id @default(cuid())
  name      String
  cost      Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model OrderLog {
  id        String      @id @default(cuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    OrderStatus
  note      String?
  createdAt DateTime    @default(now())

  @@index([orderId])
}
